apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    //GreenDao配置
    greendao {
        schemaVersion 1
        //daoPackage 'com.greendao.gen'  //dao包名
        //targetGenDir 'src/main/java'  //生成目录
    }

    //lint配置
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    //打包默认配置
    defaultConfig {
        applicationId "com.zcolin.usedemo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        // dex突破65535的限制
        //multiDexEnabled true

        ndk {
            abiFilters "armeabi-v7a"  // 指定要ndk需要兼容的架构(这样其他依赖包里mips,x86,armeabi,arm-v8之类的so会被过滤掉)
        }
        dataBinding {
            enabled true
        }
    }

    //签名配置
    signingConfigs {
        def pFile = file("../key.properties")
        def Properties p = new Properties()
        p.load(new FileInputStream(pFile))

        debug {
            storeFile file(p['RELEASE_STORE_FILE'])
            storePassword p['RELEASE_STORE_PASSWORD']
            keyAlias p['RELEASE_KEY_ALIAS']
            keyPassword p['RELEASE_KEY_PASSWORD']
        }
        release {
            storeFile file(p['RELEASE_STORE_FILE'])
            storePassword p['RELEASE_STORE_PASSWORD']
            keyAlias p['RELEASE_KEY_ALIAS']
            keyPassword p['RELEASE_KEY_PASSWORD']
        }
    }

    buildTypes {
        debug {

            buildConfigField "boolean", "LOG_DEBUG", "true"// 显示Log
            buildConfigField "boolean", "LOG_WRITE", "false"//sd中写log信息

            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"// 显示Log
            buildConfigField "boolean", "LOG_WRITE", "false"//sd中写log信息

            minifyEnabled false
            shrinkResources false  //移除无用的resource文件（如果使用getIdentifier函数的需要关闭）
            zipAlignEnabled false  //Zipalign优化
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
//    //多渠道
//    productFlavors {
//        kfb {
//              buildConfigField "boolean", "PRO_CONDITION", "true"//生产环境
//              applicationId "com.zcolin.userdemo"
//              resValue "string", "app_name", "版本1"
//          }
//        kfb1 {
//              buildConfigField "boolean", "PRO_CONDITION", "false"//
//              applicationId "com.zcolin.userdemo.test"
//              resValue "string", "app_name", "版本2"
//          }
//
//    }
//    //多渠道文件占位符替换
//    productFlavors.all {
//        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name, UMENG_CHANNEL2_VALUE: name]//menifest中使用${UMENG_CHANNEL_VALUE}
//    }

    //修改输出文件的文件名
//    def fileMap = [:]
//    applicationVariants.all { variant ->
//        variant.outputs.all { output ->
//            def outputFile = output.outputFile
//            def apkName = getApkName("${defaultConfig.versionCode}")
//            if (outputFile != null && variant.buildType.name == "release") {
//                variant.productFlavors.each { flavor ->  //多渠道包名前缀
//                    def fileName = flavor.name + "_" + rootProject.ext.apkName + "_" + apkName + ".apk"
//                    outputFileName = fileName
//                    //往数组添加输出的文件路径
//                    fileMap.put(new File(outputFile.parentFile.absolutePath, fileName), flavor.name)
//                }
//            }
//        }
//    }
//
//    tasks.whenTaskAdded { task ->
//        productFlavors.find { flavor ->
//            if (task.name.equals('assemble' + flavor.name) || task.name.equals('assembleRelease')) {
//                task.doLast {
//                    //遍历文件数组并进行操作
//                    forEachFile(fileMap)
//                }
//                return true
//            }
//        }
//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
//    sourceSets {
//        main {
//            java.srcDirs = ['src/main/java']
//        }
//    }
}

//遍历打包文件
def forEachFile(fileMap) {
    fileMap.each { file, flavor ->
        //遍历进行文件操作
        moveout_apk(file, flavor)
    }
}

//copy安装包到目标文件夹
def moveout_apk(orignalFile, flavor) {
    def intoFile = getRootDir().absolutePath + rootProject.ext.release_path + File.separator + flavor
    copy {
        from orignalFile.absolutePath
        into intoFile
    }
}

//获取Git版本号
def getApkName(versionCode) {
    return rootProject.ext.rootVersionName + "_build_" + versionCode;
}

//获取Git版本号
def getGitVersion() {
    def cmd = 'git rev-list HEAD --count'
    def gitVersion = cmd.execute().text.trim().toInteger()
    return gitVersion;
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:$supprotVersion"
    implementation "com.android.support:cardview-v7:$supprotVersion" 
    implementation "com.android.support:recyclerview-v7:$supprotVersion"
    implementation "com.android.support:design:$supprotVersion"
    implementation "com.github.zcolin:ZIjkPlayer:2.0.0"//视频播放
    implementation "com.github.zcolin:ZEasyPR:1.1.2" //车牌识别 
    implementation "com.github.zcolin:ZFrame:2.0.0"
    implementation "com.github.zcolin:ZBarCodeScanner:2.0.0"//二维码扫描
    implementation "com.github.zcolin:Matisse:2.0.0"//多图选择    
    implementation "com.github.zcolin:PullRecyclerView:2.0.0"//下拉刷新
    implementation "com.github.zcolin:ZRecyclerView:2.0.0"//下拉刷新 
    implementation "com.github.zcolin:ZUILib:2.0.0"//UI库 
    implementation "com.github.zcolin.TPartyLibs:libShareSdk:1.1.4" 
    implementation "com.github.zcolin.TPartyLibs:libAmapLocation:1.1.4" 
    implementation 'com.github.zcolin:ZWebview:2.0.0'
    //    facebook调试工具 使用chrome查看，可以进行数据库和http报文查看
    //    implementation "com.facebook.stetho:stetho:1.4.2"
    //    implementation "com.facebook.stetho:stetho-okhttp3:1.4.2"
    //leakcanary
    //    debugimplementation "com.squareup.leakcanary:leakcanary-android:1.5"
    //    releaseimplementation "com.squareup.leakcanary:leakcanary-android-no-op:1.5"
    //    testimplementation "com.squareup.leakcanary:leakcanary-android-no-op:1.5"
    implementation project(":outlib")

    // Dependencies for local unit tests
    testImplementation "junit:junit:4.12"
    // required if you want to use Mockito for unit tests
    testImplementation "org.mockito:mockito-core:1.9.5"
    // required if you want to use Powermock for unit tests
    testImplementation "org.powermock:powermock-module-junit4:1.5.6"
    testImplementation "org.powermock:powermock-module-junit4-rule:1.5.6"
    testImplementation "org.powermock:powermock-api-mockito:1.5.6"
}


